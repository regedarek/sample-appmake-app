// This file was generated by modules-webmake (modules for web) project.
// See: https://github.com/medikoo/modules-webmake

(function (modules) {
	var getModule, getRequire, require;
	getModule = (function (wrap) {
		return function (scope, tree, path, fullpath) {
			var name, dir, exports, module, fn, isDir;
			path = path.split('/');
			name = path.pop();
			if (!name) {
				isDir = true;
				name = path.pop();
			}
			if ((name === '.') || (name === '..')) {
				path.push(name);
				name = '';
			}
			while ((dir = path.shift())) {
				if (dir === '..') {
					scope = tree.pop();
				} else if (dir !== '.') {
					tree.push(scope);
					scope = scope[dir];
					if (!scope) {
						throw new Error("Could not find module '" + fullpath + "'");
					}
				}
			}
			if (name) {
				if (!isDir && scope[name + '.js']) {
					name += '.js';
				}
				if (typeof scope[name] === 'object') {
					tree.push(scope);
					scope = scope[name];
					name = 'index.js';
				}
			} else {
				name = 'index.js';
			}
			fn = scope[name];
			if (!fn) throw new Error("Could not find module '" + fullpath + "'");
			if (fn.hasOwnProperty('module')) return fn.module.exports;
			exports = {};
			fn.module = module = { exports: exports };
			fn.call(exports, exports, module, getRequire(scope, tree));
			return module.exports;
		};
	}(function (cmodule) {
		return function (ignore, module) {
			module.exports = cmodule.exports;
		};
	}));
	require = function (scope, tree, fullpath) {
		var name, path = fullpath, t = fullpath.charAt(0);
		if (t === '/') {
			path = path.slice(1);
			scope = modules['/'];
			tree = [];
		} else if (t !== '.') {
			name = path.split('/', 1)[0];
			scope = modules[name];
			tree = [];
			path = path.slice(name.length + 1) || scope[':mainpath:'];
		}
		return getModule(scope, tree, path, fullpath);
	};
	getRequire = function (scope, tree) {
		return function (path) {
			return require(scope, [].concat(tree), path);
		};
	};
	return getRequire(modules, []);
})({
	"new_project": {
		"js": {
			"App.js": function (exports, module, require) {
				$(function() {
					window.App = {};

					App.templates = require("./templates");
					App.router = require("./router");

					App.views = {
						footer: require("./views/footer")
					}

					Backbone.history.start();
				});
			},
			"router.js": function (exports, module, require) {
				var todosLayout = require("./views/layouts/todos");

				var router = Backbone.Router.extend({
					routes: {
						"todos": "todos",
						"todo/:id": "todo", 
						"options": "options",
						"*default": "todos"
					},
					todos: function() {
						App.layout = new todosLayout;
						App.layout.render();
					},
					todo: function(id) {
						console.log("todo " + id);
					},
					options: function() {
						console.log("options");
					}
				});

				module.exports = new router;
			},
			"templates.js": function (exports, module, require) {
				module.exports = {"description": function (it) {
				var out='<p>'+( it.desc )+'</p>';return out;
				},"footer": function (it) {
				var out='<div style="width: 100px; height: 100px; background-color: red">Test</div>';return out;
				},"welcome": function (it) {
				var out='<h1>'+( it.title )+'</h1><p>'+( it.description )+'</p>';return out;
				}};
			},
			"views": {
				"footer.js": function (exports, module, require) {
					var footer = Backbone.View.extend({
						el: "div",
						initialize: function() {
							console.log(this.options);
						},
						render: function() {
							// this.$el.innerHTML = App.templates["footer"];
							console.log(this.el);
							return this;
						}
					});

					module.exports = footer;
				},
				"layouts": {
					"todos.js": function (exports, module, require) {
						var layout = Backbone.View.extend({
							render: function() {
								var layoutTpl = App.templates["welcome"]({
									title: "john",
									description: App.templates["description"]({
										desc: "foobar"
									})
								})

								document.body.innerHTML = layoutTpl;

								var footerView = new App.views.footer({ height: 30 });

								console.log(footerView.render());
								$("body").append(footerView.render().el);
							}
						});

						module.exports = layout;
					}
				}
			}
		}
	}
})("new_project/js/App");
